setwd("~/GitHub/book-r-stan-bayesian-model-intro/book-data")
load("~/GitHub/book-r-stan-bayesian-model-intro/book-data/.RData")
# MCMCの結果の確認
glm_binom_brms
# 係数の解釈
# 説明変数を作る
newdata_1 <- data.frame(
solar = c("shade", "sunshine", "sunshine"),
nutrition = c(2,2,3),
size = c(10,10,10)
)
newdata_1
# 発芽率を予測
# 線形予測子の予測値
linear_fit <- fitted(glm_binom_brms, newdata_1, scale = "linear")[,1]
# ロジスティック関数を適用して、成功確率を計算
fit <- 1 / (1 + exp(-linear_fit))
fit
# オッズを計算
odds_1 <- fit[1] / (1 - fit[1])
odds_2 <- fit[2] / (1 - fit[2])
odds_3 <- fit[3] / (1 - fit[3])
# モデルの係数を取得
coef <- fixef(glm_binom_brms)[,1]
coef
# パッケージの読み込み
library(rstan)
library(brms)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# モデルの係数を取得
coef <- fixef(glm_binom_brms)[,1]
coef
# solarがshadeからsunshineに変わった時のオッズ比
odds_2 / odds_1
exp(coef["solarsunshine"])
# nutritionが1から2に変わった時のオッズ比
odds_3 / odds_2
exp(coef["nutrition"])
# 95%ベイズ信用区間付きの回帰曲線
eff <- marginal_effects(glm_binom_brms,
effects = "nutrition:solar")
plot(eff, points = TRUE)
# ロジスティク回帰モデルを作る
glm_binom_brms <- brm(
germination | trials(size) ~ solar + nutrition, # modelの構造を指定
family = binomial(),                         # 二項分布を使う
data = germination_dat,                      # データ
seed = 1,                                    # 乱数の種
prior = c(set_prior("", class = "Intercept"))# 無情報事前分布にする
)
# MCMCの結果の確認
glm_binom_brms
# 95%ベイズ信用区間付きの回帰曲線
eff <- marginal_effects(glm_binom_brms,
effects = "nutrition:solar")
plot(eff, points = TRUE)
eff <- conditional_effects(glm_binom_brms,
effects = "nutrition:solar")
plot(eff, points = TRUE)
# 参考：事後分布の図示
plot(glm_binom_brms, pars = "^b_")
# 参考：係数の信頼区間
stanplot(glm_binom_brms, type = "intervals", pars = "^b_")
# 参考：95%ベイズ予測区間付きのグラフ
set.seed(1)
eff_pre <- marginal_effects(glm_binom_brms,
method = "predict",
effects = "nutrition:solar")
plot(eff_pre, points = TRUE)
# 参考：ダミー変数の作成
solar_dummy <- as.numeric(germination_dat$solar == "sunshine")
# 参考：データの作成
data_list_1 <- list(
N = nrow(germination_dat),
germination = germination_dat$germination,
binom_size = germination_dat$size,
solar = solar_dummy,
nutrition = germination_dat$nutrition
)
data_list_1
# 参考：自分でStanコードを実装
glm_binom_stan <- stan(
file = "3-9-1-glm-binom-1.stan",
data = data_list_1,
seed = 1
)
# 参考：結果の表示
print(glm_binom_stan,
probs = c(0.025, 0.5, 0.975))
# 分析対象のデータ
interaction_1 <- read.csv("3-10-1-interaction-1.csv")
head(interaction_1, n = 3)
# データの要約
summary(interaction_1)
# デザイン行列の作成
model.matrix(sales ~ publicity * bargen, interaction_1)
# モデル化
interaction_brms_1 <- brm(
formula = sales ~ publicity * bargen,
family = gaussian(link = "identity"),
data = interaction_1,
seed = 1,
prior = c(set_prior("", class = "Intercept"),
set_prior("", class = "sigma"))
)
# MCMCの結果の確認
interaction_brms_1
# 参考：事後分布の図示
plot(interaction_brms_1)
# 交互作用の効果の確認
# 説明変数を作る
newdata_1 <- data.frame(
publicity = rep(c("not", "to_implement"),2),
bargen = rep(c("not", "to_implement"),each = 2)
)
newdata_1
# 予測
round(fitted(interaction_brms_1, newdata_1), 2)
# モデルの図示
eff_1 <- marginal_effects(interaction_brms_1,
effects = "publicity:bargen")
plot(eff_1, points = T)
# 分析対象のデータ
interaction_2 <- read.csv("3-10-2-interaction-2.csv")
head(interaction_2, n = 3)
# データの要約
summary(interaction_2)
# 参考：デザイン行列の作成
model.matrix(sales ~ publicity * temperature, interaction_2)
# モデル化
interaction_brms_2 <- brm(
formula = sales ~ publicity * temperature,
family = gaussian(link = "identity"),
data = interaction_2,
seed = 1,
prior = c(set_prior("", class = "Intercept"),
set_prior("", class = "sigma"))
)
# MCMCの結果の確認
interaction_brms_2
# 参考：事後分布の図示
plot(interaction_brms_2)
# 交互作用の効果の確認
# 説明変数を作る
newdata_2 <- data.frame(
publicity   = rep(c("not", "to_implement"), each = 2),
temperature = c(0,10,0,10)
)
newdata_2
# 予測
round(fitted(interaction_brms_2, newdata_2), 2)
# 回帰直線の図示
eff_2 <- marginal_effects(interaction_brms_2,
effects = "temperature:publicity")
plot(eff_2, points = T)
# 95%ベイズ信用区間付きの回帰曲線
set.seed(1)
eff <- marginal_effects(glm_binom_brms,
effects = "nutrition:solar")
plot(eff, points = TRUE)
# 95%ベイズ信用区間付きの回帰曲線
set.seed(1)
eff <- conditional_effects(glm_binom_brms,
effects = "nutrition:solar")
plot(eff, points = TRUE)
eff <- marginal_effects(glm_binom_brms,
effects = "nutrition:solar",
conditions = data.frame(size = 10))
plot(eff, points = TRUE)
