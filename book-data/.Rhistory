setwd("~/GitHub/book-r-stan-bayesian-model-intro/book-data")
# パッケージの読み込み
library(rstan)
library(brms)
library(bayesplot)
library(ggfortify)
library(gridExtra)
# 計算の高速化
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
# 状態空間モデルの図示をする関数の読み込み
source("plotSSM.R", encoding="utf-8")
# データの読み込み
sales_df_2 <- read.csv("5-4-1-sales-ts-2.csv")
sales_df_2$date <- as.POSIXct(sales_df_2$date)
head(sales_df_2, n = 3)
# 図示
autoplot(ts(sales_df_2[, -1]))
# データの分割
sales_df_2_head <- head(sales_df_2, n = 50)
sales_df_2_tail <- tail(sales_df_2, n = 50)
# 前半のモデル化
mod_lm_head <- brm(
formula = sales ~ publicity,
family = gaussian(link = "identity"),
data = sales_df_2_head,
seed = 1
)
# 後半のモデル化
mod_lm_tail <- brm(
formula = sales ~ publicity,
family = gaussian(link = "identity"),
data = sales_df_2_tail,
seed = 1
)
# 結果の出力
# 前半
fixef(mod_lm_head)
# 後半
fixef(mod_lm_tail)
# データの準備
data_list <- list(
y = sales_df_2$sales,
ex = sales_df_2$publicity,
T = nrow(sales_df_2)
)
# モデルの推定
time_varying_coef_stan <- stan(
file = "5-4-time-varying-coef.stan",
data = data_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6
)
# 結果の表示
print(time_varying_coef_stan,
pars = c("s_w", "s_t", "s_v", "b[100]"),
probs = c(0.025, 0.5, 0.975))
# 結果の表示
print(time_varying_coef_stan,
pars = c("s_w", "s_t", "s_v", "b[1]"),
probs = c(0.025, 0.5, 0.975))
# 結果の表示
print(time_varying_coef_stan,
pars = c("s_w", "s_t", "s_v", "b[51]"),
probs = c(0.025, 0.5, 0.975))
# 参考:収束の確認など
mcmc_rhat(rhat(time_varying_coef_stan))
check_hmc_diagnostics(time_varying_coef_stan)
# 参考:トレースなどのチェック
mcmc_sample <- rstan::extract(time_varying_coef_stan, permuted = FALSE)
mcmc_acf_bar(mcmc_sample, pars = c("s_w", "s_t", "s_v", "lp__"))
mcmc_trace(mcmc_sample, pars = c("s_w", "s_t", "s_v", "lp__"))
# 参考:すべての推定値を出力
options(max.print=100000)
print(time_varying_coef_stan, probs = c(0.025, 0.5, 0.975))
# MCMCサンプルの取得
mcmc_sample <- rstan::extract(time_varying_coef_stan)
# 図示
p_all <- plotSSM(mcmc_sample = mcmc_sample,
time_vec = sales_df_2$date,
obs_vec = sales_df_2$sales,
state_name = "alpha",
graph_title = "推定結果:状態",
y_label = "sales")
p_mu <- plotSSM(mcmc_sample = mcmc_sample,
time_vec = sales_df_2$date,
obs_vec = sales_df_2$sales,
state_name = "mu",
graph_title = "推定結果:集客効果を除いた",
y_label = "sales")
p_b <- plotSSM(mcmc_sample = mcmc_sample,
time_vec = sales_df_2$date,
state_name = "b",
graph_title = "推定結果:集客効果の変遷",
y_label = "coef")
grid.arrange(p_all, p_mu, p_b)
# 状態空間モデルの図示をする関数の読み込み
source("plotSSM.R", encoding="utf-8")
# データの読み込み
sales_df_3 <- read.csv("5-5-1-sales-ts-3.csv")
sales_df_3$date <- as.POSIXct(sales_df_3$date)
head(sales_df_3, n = 3)
# 図示
autoplot(ts(sales_df_3[, -1]))
# データの準備
data_list <- list(
y = sales_df_3$sales,
T = nrow(sales_df_3)
)
# ローカルレベルモデルの推定
local_level <- stan(
file = "5-2-1-local-level.stan",
data = data_list,
seed = 1
)
# ローカルレベルモデルの推定結果
print(local_level,
par = c("s_w", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975))
# 平滑化トレンドモデルの推定
smooth_trend <- stan(
file = "5-5-1-smooth-trend.stan",
data = data_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
# 平滑化トレンドモデルの推定結果
print(smooth_trend,
par = c("s_z", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975))
# ローカル線形トレンドモデルの推定
local_linear_trend <- stan(
file = "5-5-2-local-linear-trend.stan",
data = data_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6
)
# ローカル線形トレンドモデルの推定結果
print(local_linear_trend,
par = c("s_w", "s_z", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975))
# 参考：収束の確認など
mcmc_rhat(rhat(local_level))
mcmc_rhat(rhat(smooth_trend))
mcmc_rhat(rhat(local_linear_trend))
check_hmc_diagnostics(local_level)
check_hmc_diagnostics(smooth_trend)
check_hmc_diagnostics(local_linear_trend)
# 参考：推定結果一覧
options(max.print=100000)
print(local_level, probs = c(0.025, 0.5, 0.975))
print(smooth_trend, probs = c(0.025, 0.5, 0.975))
print(local_linear_trend, probs = c(0.025, 0.5, 0.975))
# 参考：トレースプロット
mcmc_sample_1 <- rstan::extract(local_level, permuted = FALSE)
mcmc_sample_2 <- rstan::extract(smooth_trend, permuted = FALSE)
mcmc_sample_3 <- rstan::extract(local_linear_trend, permuted = FALSE)
mcmc_trace(mcmc_sample_1, pars = c("s_w", "s_v", "lp__"))
mcmc_trace(mcmc_sample_2, pars = c("s_z", "s_v", "lp__"))
mcmc_trace(mcmc_sample_3, pars = c("s_w", "s_z", "s_v", "lp__"))
# MCMCサンプルの取得
mcmc_sample_ll <- rstan::extract(local_level)
mcmc_sample_st <- rstan::extract(smooth_trend)
mcmc_sample_llt <- rstan::extract(local_linear_trend)
# ローカルレベルモデル
p_ll <- plotSSM(mcmc_sample = mcmc_sample_ll,
time_vec = sales_df_3$date,
obs_vec = sales_df_3$sales,
state_name = "mu",
graph_title = "ローカルレベルモデル",
y_label = "sales")
# 平滑化トレンドモデル
p_st <- plotSSM(mcmc_sample = mcmc_sample_st,
time_vec = sales_df_3$date,
obs_vec = sales_df_3$sales,
state_name = "mu",
graph_title = "平滑化トレンドモデル",
y_label = "sales")
# ローカル線形トレンドモデル
p_llt <- plotSSM(mcmc_sample = mcmc_sample_llt,
time_vec = sales_df_3$date,
obs_vec = sales_df_3$sales,
state_name = "mu",
graph_title = "ローカル線形トレンドモデル",
y_label = "sales")
grid.arrange(p_ll, p_st, p_llt)
# ドリフト成分の図示
plotSSM(mcmc_sample = mcmc_sample_llt,
time_vec = sales_df_3$date,
state_name = "delta",
graph_title = "ドリフト成分",
y_label = "delta")
# 状態空間モデルの図示をする関数の読み込み
source("plotSSM.R", encoding="utf-8")
# データの読み込み
sales_df_4 <- read.csv("5-6-1-sales-ts-4.csv")
sales_df_4$date <- as.POSIXct(sales_df_4$date)
head(sales_df_4, n = 3)
# 図示
autoplot(ts(sales_df_4[, -1]))
# データの準備
data_list <- list(
y = sales_df_4$sales,
T = nrow(sales_df_4)
)
# 基本構造時系列モデルの推定
basic_structual <- stan(
file = "5-6-1-basic-structual-time-series.stan",
data = data_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.97, max_treedepth = 15)
)
# 基本構造時系列モデルの推定結果
print(basic_structual,
par = c("s_z", "s_s", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975))
# 参考：収束の確認
mcmc_rhat(rhat(basic_structual))
check_hmc_diagnostics(basic_structual)
# 参考:トレースプロット
mcmc_sample <- rstan::extract(basic_structual, permuted = FALSE)
mcmc_trace(mcmc_sample, pars = c("s_z", "s_s", "s_v", "lp__"))
# 参考：推定結果一覧
options(max.print=100000)
print(basic_structual, probs = c(0.025, 0.5, 0.975))
# MCMCサンプルの取得
mcmc_sample <- rstan::extract(basic_structual)
# すべての成分を含んだ状態推定値の図示
p_all <- plotSSM(mcmc_sample = mcmc_sample,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "alpha",
graph_title = "すべての成分を含んだ状態推定値",
y_label = "sales")
# 周期成分を除いた状態推定値の図示
p_trend <- plotSSM(mcmc_sample = mcmc_sample,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "mu",
graph_title = "周期成分を除いた状態推定値",
y_label = "sales")
# 周期成分の図示
p_cycle <- plotSSM(mcmc_sample = mcmc_sample,
time_vec = sales_df_4$date,
state_name = "gamma",
graph_title = "周期成分",
y_label = "gamma")
grid.arrange(p_all, p_trend, p_cycle)
